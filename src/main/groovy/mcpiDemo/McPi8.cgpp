package mcpiDemo

import groovyParallelPatterns.DataDetails
import groovyParallelPatterns.ResultDetails
import groovyParallelPatterns.cluster.connectors.NodeRequestingFanAny
import groovyParallelPatterns.cluster.connectors.NodeRequestingFanList
import groovyParallelPatterns.cluster.connectors.NodeRequestingSeqCastList
import groovyParallelPatterns.cluster.connectors.OneNodeRequestedList
import groovyParallelPatterns.connectors.reducers.AnyFanOne
import groovyParallelPatterns.connectors.reducers.ListFanOne
import groovyParallelPatterns.functionals.groups.AnyGroupAny
import groovyParallelPatterns.functionals.groups.ListGroupList
import groovyParallelPatterns.terminals.Collect
import groovyParallelPatterns.terminals.Emit
import mcpiDemo.MCpiData
import mcpiDemo.MCpiResultsSerialised
import mcpiDemo.SerializedMCpiData

// number of workers on each node
int cores = 4
// number of clusters
int clusters = 2 //worker nodes
//@emit 192.168.1.176

def emitDetails = new DataDetails(
    dName: MCpiData.getName(),
    dInitMethod: MCpiData.init,
    dInitData: [10],
    dCreateMethod: MCpiData.create,
    dCreateData: [100000]
)

def emit = new Emit (
    eDetails: emitDetails
)

def onrl = new OneNodeRequestedList()

//@cluster clusters

def nrscl = new NodeRequestingSeqCastList()

def group = new ListGroupList(
    workers: cores,
    function: SerializedMCpiData.withinOp
)
def lfo = new ListFanOne()

//@collect

def resultDetails = new ResultDetails(
    rName: MCpiResultsSerialised.getName(),
    rInitMethod: MCpiResultsSerialised.init,
    rCollectMethod: MCpiResultsSerialised.collector,
    rFinaliseMethod: MCpiResultsSerialised.finalise
)

def afo = new AnyFanOne(
    sources: clusters
)

def collector = new Collect(
    rDetails: resultDetails
)
