package mandelbrotScripts

import groovyParallelPatterns.connectors.reducers.AnyFanOne
import groovyParallelPatterns.connectors.spreaders.OneFanAny
import groovyParallelPatterns.functionals.groups.AnyGroupAny
import groovyParallelPatterns.terminals.Collect
import groovyParallelPatterns.terminals.Emit
import groovyParallelPatterns.*

import mandelbrotClasses.Mdata as md
import mandelbrotClasses.Mcollect as mc


// usage runDemo mandelbrot/scripts RunMandelBrotLineNoGUI workers maxInterations width height pixeldelta

int workers
int maxIterations          // 100
int width                  //1400    700        350 in pixels  2800
int height                 //800     400        200 in pixels  1600


if (args.size() == 0){
    workers = 4
    maxIterations = 100
    width = 350
    height = 200
}
else {
    // assumed to be running via runDemo
//    String folder = args[0] not required
    workers = Integer.parseInt(args[1])
    maxIterations = Integer.parseInt(args[2])
    width = Integer.parseInt(args[3])
    height = Integer.parseInt(args[4])
}

System.gc()

print "noGUI, $width, $height, $maxIterations, $workers, "
long startTime = System.currentTimeMillis()

def emitDetails = new DataDetails(dName: md.getName(),
                  dInitMethod: md.initialiseClass,
                  dInitData: [width, maxIterations],
                  dCreateMethod: md.createInstance)

def resultDetails = new ResultDetails(rName: mc.getName(),
                    rInitMethod: mc.init,
                    rCollectMethod: mc.collector,
                    rFinaliseMethod: mc.finalise)

def emit = new Emit(eDetails: emitDetails)

def spread = new OneFanAny(destinations: workers)

def group = new AnyGroupAny (function: md.calculate,
                workers: workers)

def reduce = new AnyFanOne ( sources: workers)

def collector = new Collect(rDetails: resultDetails)

def endtime = System.currentTimeMillis()
println " ${endtime - startTime}"
