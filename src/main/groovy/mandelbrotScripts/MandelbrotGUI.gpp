package mandelbrotScripts

import groovyParallelPatterns.connectors.reducers.AnyFanOne
import groovyParallelPatterns.connectors.spreaders.OneFanAny
import groovyParallelPatterns.functionals.groups.AnyGroupAny
import groovyParallelPatterns.terminals.CollectUI
import groovyParallelPatterns.terminals.Emit
import groovyParallelPatterns.*

import java.awt.*

import mandelbrotClasses.Mdata as ml
import mandelbrotClasses.Mgui as mlr

//usage runDemo mandelbrot\scripts RunMadelbrotLine resultsFile workers iterations width height delta

int workers
int maxIterations
int width                  //1400   700        350
int height                 //800    400        200

if (args.size() == 0){
    workers = 16
    maxIterations = 100
    width = 350
    height = 200
}
else {
    // assumed to be running via runDemo
//    String folder = args[0] not required
    workers = Integer.parseInt(args[1])
    maxIterations = Integer.parseInt(args[2])
    width = Integer.parseInt(args[3])
    height = Integer.parseInt(args[4])
}

print "GUI, $width, $height, $maxIterations, $workers, "
System.gc()

long startTime = System.currentTimeMillis()

def emitDetails = new DataDetails(dName: ml.getName(),
                  dInitMethod: ml.initialiseClass,
                  dInitData: [width, maxIterations],
                  dCreateMethod: ml.createInstance)

def guiDetails = new ResultDetails( rName: mlr.getName(),
                  rInitMethod: mlr.init,
                  rInitData: [width, height, Color.WHITE],
                  rCollectMethod : mlr.updateDList,
                  rFinaliseMethod : mlr.finalise )


def emit = new Emit(eDetails: emitDetails)

def spread = new OneFanAny(destinations: workers)

def group = new AnyGroupAny (function: ml.calculate,
                workers: workers)

def reduce = new AnyFanOne ( sources: workers)

def gui = new CollectUI(guiDetails: guiDetails)


long endTime = System.currentTimeMillis()
println " ${endTime - startTime}"
