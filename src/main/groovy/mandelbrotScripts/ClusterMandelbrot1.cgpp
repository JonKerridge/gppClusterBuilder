package mandelbrotScripts

import groovyParallelPatterns.DataDetails
import groovyParallelPatterns.ResultDetails
import groovyParallelPatterns.cluster.connectors.NodeRequestingFanAny
import groovyParallelPatterns.cluster.connectors.OneNodeRequestedList
import groovyParallelPatterns.connectors.reducers.AnyFanOne
import groovyParallelPatterns.functionals.groups.AnyGroupAny
import groovyParallelPatterns.terminals.Collect
import groovyParallelPatterns.terminals.Emit
import mandelbrotClasses.Mdata
import mandelbrotClasses.Mcollect


int cores = 4  // number of workers on each node
int clusters = 1 // number of clusters
int maxIterations = 100
int width  = 350                //1400   700        350

//@emit 192.168.1.176

def emitDetails = new DataDetails(
    dName: Mdata.getName(),
    dInitMethod: Mdata.initialiseClass,
    dInitData: [width, maxIterations],
    dCreateMethod: Mdata.createInstance
)
def emit = new Emit (
    eDetails: emitDetails
)
def onrl = new OneNodeRequestedList()

//@cluster clusters

def nrfa = new NodeRequestingFanAny(
    destinations: cores
)
def group = new AnyGroupAny(
    workers: cores,
    function: Mdata.calculate
)
def afo1 = new AnyFanOne(
    sources: cores )

//@collect

def resultDetails = new ResultDetails(
    rName: Mcollect.getName(),
    rInitMethod: Mcollect.init,
    rCollectMethod: Mcollect.collector,
    rFinaliseMethod: Mcollect.finalise
)
def afo = new AnyFanOne(
    sources: clusters
)
def collector = new Collect(
    rDetails: resultDetails
)
